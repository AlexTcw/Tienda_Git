CREATE TABLE permission
(
    permission_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name          VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_permission PRIMARY KEY (permission_id)
);

ALTER TABLE permission
    ADD CONSTRAINT uc_permission_name UNIQUE (name);

CREATE TABLE rol_permission
(
    permission_id BIGINT NOT NULL,
    role_id       BIGINT NOT NULL,
    CONSTRAINT pk_rol_permission PRIMARY KEY (permission_id, role_id)
);

CREATE TABLE role
(
    role_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name    VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_role PRIMARY KEY (role_id)
);

ALTER TABLE role
    ADD CONSTRAINT uc_role_name UNIQUE (name);

ALTER TABLE rol_permission
    ADD CONSTRAINT fk_rolper_on_permission FOREIGN KEY (permission_id) REFERENCES permission (permission_id);

ALTER TABLE rol_permission
    ADD CONSTRAINT fk_rolper_on_role FOREIGN KEY (role_id) REFERENCES role (role_id);

ALTER TABLE rol_permission
    DROP CONSTRAINT fk_rolper_on_permission;

ALTER TABLE rol_permission
    DROP CONSTRAINT fk_rolper_on_role;

CREATE TABLE "user"
(
    user_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    first_name VARCHAR(255),
    last_name  VARCHAR(255),
    phone      VARCHAR(255),
    address    VARCHAR(255),
    email      VARCHAR(255)                            NOT NULL,
    username   VARCHAR(255)                            NOT NULL,
    password   VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (user_id)
);

CREATE TABLE user_role
(
    role_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT pk_user_role PRIMARY KEY (role_id, user_id)
);

ALTER TABLE "user"
    ADD CONSTRAINT uc_user_email UNIQUE (email);

ALTER TABLE "user"
    ADD CONSTRAINT uc_user_username UNIQUE (username);

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_role_on_role FOREIGN KEY (role_id) REFERENCES role (role_id);

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_role_on_user FOREIGN KEY (user_id) REFERENCES "user" (user_id);

INSERT INTO role values (1,'ADMIN');
INSERT INTO role values (2,'GENERIC');

INSERT INTO permission VALUES (1,'CREATE');
INSERT INTO permission VALUES (2,'REED');
INSERT INTO permission VALUES (3,'MODIFY');
INSERT INTO permission VALUES (4,'DELETE');

INSERT INTO rol_permission VALUES(1,1);
INSERT INTO rol_permission VALUES(2,1);
INSERT INTO rol_permission VALUES(3,1);
INSERT INTO rol_permission VALUES(4,1);
INSERT INTO rol_permission VALUES(2,2);

INSERT INTO "user" VALUES (0,'admin','generic','1111111111','NA','root@email.com','root','$2a$10$C8/rXUWAkHuzLtM8wBOnmeBWT31jaW9sxn0kiqbKjvqHlqdW1Xug.');

INSERT INTO user_role VALUES(1,0);
INSERT INTO user_role VALUES(2,0);

ALTER TABLE user_role
    DROP CONSTRAINT fk_user_role_on_role;

ALTER TABLE user_role
    DROP CONSTRAINT fk_user_role_on_user;

CREATE SEQUENCE IF NOT EXISTS product_seq START WITH 1 INCREMENT BY 50;

CREATE TABLE product
(
    product_id  BIGINT       NOT NULL,
    name        VARCHAR(255) NOT NULL,
    sku         VARCHAR(50)  NOT NULL,
    description VARCHAR(500),
    price       DOUBLE PRECISION,
    brand       VARCHAR(255) NOT NULL,
    CONSTRAINT pk_product PRIMARY KEY (product_id)
);

ALTER TABLE product
    ADD CONSTRAINT uc_product_sku UNIQUE (sku);

CREATE SEQUENCE IF NOT EXISTS category_seq START WITH 1 INCREMENT BY 50;

CREATE TABLE category
(
    category_id BIGINT       NOT NULL,
    name        VARCHAR(255) NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (category_id)
);

ALTER TABLE category
    ADD CONSTRAINT uc_category_name UNIQUE (name);

CREATE SEQUENCE IF NOT EXISTS category_product_seq START WITH 1 INCREMENT BY 50;

CREATE TABLE category_product
(
    category_product_id BIGINT NOT NULL,
    product_id          BIGINT NOT NULL,
    category_id         BIGINT NOT NULL,
    CONSTRAINT pk_category_product PRIMARY KEY (category_product_id)
);

ALTER TABLE category_product
    ADD CONSTRAINT FK_CATEGORY_PRODUCT_ON_CATEGORY FOREIGN KEY (category_id) REFERENCES category (category_id);

ALTER TABLE category_product
    ADD CONSTRAINT FK_CATEGORY_PRODUCT_ON_PRODUCT FOREIGN KEY (product_id) REFERENCES product (product_id);

CREATE SEQUENCE IF NOT EXISTS inventory_seq START WITH 1 INCREMENT BY 50;

CREATE TABLE inventory
(
    inventory_id BIGINT NOT NULL,
    stock        INTEGER,
    product_id   BIGINT NOT NULL,
    CONSTRAINT pk_inventory PRIMARY KEY (inventory_id)
);

ALTER TABLE inventory
    ADD CONSTRAINT FK_INVENTORY_ON_PRODUCT FOREIGN KEY (product_id) REFERENCES product (product_id);

